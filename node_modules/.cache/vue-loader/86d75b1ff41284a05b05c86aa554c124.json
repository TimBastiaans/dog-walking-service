{"remainingRequest":"C:\\Users\\Gebruiker\\WebstormProjects\\dog-walking-service\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Gebruiker\\WebstormProjects\\dog-walking-service\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\Gebruiker\\WebstormProjects\\dog-walking-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Gebruiker\\WebstormProjects\\dog-walking-service\\src\\components\\AppDetails.vue?vue&type=template&id=28f94ade&scoped=true&","dependencies":[{"path":"C:\\Users\\Gebruiker\\WebstormProjects\\dog-walking-service\\src\\components\\AppDetails.vue","mtime":1648987192851},{"path":"C:\\Users\\Gebruiker\\WebstormProjects\\dog-walking-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648392049970},{"path":"C:\\Users\\Gebruiker\\WebstormProjects\\dog-walking-service\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1648392047566},{"path":"C:\\Users\\Gebruiker\\WebstormProjects\\dog-walking-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648392049970},{"path":"C:\\Users\\Gebruiker\\WebstormProjects\\dog-walking-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1648392046571}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}